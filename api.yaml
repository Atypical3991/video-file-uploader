openapi: '3.0.2'
info:
  title: Video Storage Server API
  version: '1.0'
servers:
  - url: http://localhost:8080/v1
paths:
  /health:
    get:
      description: Return the health of the service as HTTP 200 status. Useful to check if everything is configured correctly.
      responses:
        '200':
          description: OK
  /files/{fileid}:
    get:
      description: Download a video file by fileid. The file name will be restored as it was when you uploaded it.
      parameters:
        - in: path
          name: fileid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers:
            Content-Disposition:
              schema:
                type: string
          content:
            video/mp4:  # foo.mp4, foo.mpg4
              schema:
                type: string
                format: binary
            video/mpeg: # bar.mpg bar.mpeg
              schema:
                type: string
                format: binary
        '404':
          description: File not found
        '500':
          description: Internal server error
        '400':
          description:  Bad request
    delete:
      description: Delete a video file
      parameters:
        - in: path
          name: fileid
          required: true
          schema:
            type: string
      responses:
        '204':
          description: File was successfully removed
        '404':
          description: File not found
        '500':
          description: Internal server error
        '400':
          description: Bad request
  /files/locate/{fileid}:
    get:
      tags:
        - files > {fileid}
      summary: /files/locate/:fileid
      description: To locate recently uploded file
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: fileid
          in: path
          schema:
            type: string
          required: true
          description: '(Required) '
          example: nostrud est fugiat
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                fileData:
                  FileId: 636c12b458afa6a1daa3746d
                  Name: sample_960x400_ocean_with_audio.mpeg
                  Size: 8409088
                  CreatedAt: '2022-11-09T20:51:00.376Z'
                  FileType: video/mpeg
                  Hash: f1effd2961f47febbec929cf339a36879c180f3a
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: nostrud est fugiat
  /files:
    post:
      description: Upload a video file
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                # Content-Disposition: form-data; name='data'; filename='FILENAME'
                data:
                  # Content-Type for string/binary is `video/mp4` or `video/mpeg`
                  type: string
                  format: binary
      responses:
        '201':
          description: File uploaded
          headers:
            Location:
              schema:
                type: string
              description: "Created file location"
        '400':
          description: Bad request
        '409':
          description: File exists
        '415':
          description: Unsupported Media Type
        '500':
          description: Internal server error
    get:
      description: List uploaded files
      responses:
        '200':
          description: File list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UploadedFile'
        '500':
          description: Internal server error
components:
  schemas:
    UploadedFile:
      required:
        - fileid
        - name
        - size
        - created_at
      properties:
        fileid:
          type: string
        name:
          description: filename
          type: string
        size:
          description: file size (bytes)
          type: integer
        created_at:
          type: string
          format: date-time
          description: Time when the data was saved on the server side.
